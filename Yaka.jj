/*
 *
 *      Auteur: Pedrono Marie-Jo
 *
 * 		creation : 13 fevrier 2002
 *
 *      nature : projet etudiant
 *
 */

/* TODO
	BUG : Lorsqu'une erreur est detectee, le fichier est cree => le fichier ne doit pas etre cree
	Verifier si expr5 marche bien
*/

options{
	JDK_VERSION="1.5";	
}

PARSER_BEGIN(Yaka)



public class Yaka{
	public static Declaration declaration = new Declaration();
	public static TabIdent tabIdent = new TabIdent();
	public static Expression expression = new Expression();
	public static String fichier;
	public static YVM yvm ;
	public static int ligne = 1;
	public static boolean finAppelFonction = false;


  public static void main(String args[]) { 
    Yaka analyseur;
    java.io.InputStream input;

    if (args.length==1) {
      try {
        input = new java.io.FileInputStream("Yaka/"+args[args.length-1]+".yaka");
        fichier = args[args.length-1];
      	yvm = new YVMasm("ASM/"+fichier + ".asm");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable.");
        return;
      }
    } else if (args.length==0) {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
    } else {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try {
      analyseur = new Yaka(input);
      analyseur.analyse();
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\n"));
      System.out.println("Erreur de syntaxe : "+msg);
    }
  } 
  
}

PARSER_END(Yaka)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{public static String identLu,chaineLue;
 public static int entierLu;}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"{Yaka.ligne++;}
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots reserves*/

TOKEN :
{
  < BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENTIER: "ENTIER" >
| < RETOURNE: "RETOURNE" >
| < VRAI: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME : "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">
| <PLUS : "PLUS">
| <MOINS : "MOINS">
| <MULT : "MULT">
| <DIV : "DIV">
| <INF : "INF">
| <SUP : "SUP">
| <INFOUEG : "INFOUEG">
| <SUPOUEG : "SUPOUEG">
| <EGAL : "EGAL">
| <DIFFERENT : "DIFFERENT">
| <ERREUR : "ERREUR">
| <NEG : "NEG">
}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Integer.parseInt(image.toString());
        }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();	
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void analyse() : {}
{
   <PROGRAMME> {yvm.entete();} <ident>	
   (declFonction() )* 
   <PRINCIPAL> {yvm.main();}
   bloc() 
   <FPRINCIPAL>
   {yvm.queue();}
   <FPROGRAMME> 
}

void bloc() : {}{
 (declConst())*
 (declVar())* {yvm.ouvreBloc(IdVar.getCompteur()*2);}
  suiteInstr() 
}

/******************** Fonction *********************/
void declFonction() : {}
{
  type() <FONCTION> 
  <ident>
  {	yvm.nomFonc(YakaTokenManager.identLu);
   	declaration.ajoutIdentFonc(YakaTokenManager.identLu);
 	expression.setFonction(tabIdent.chercheIdentGlob(YakaTokenManager.identLu));
  }
  paramForms(){tabIdent.setOffsets();}
  bloc()
  {yvm.fermeBloc(IdParam.getCompteur()*2);
  tabIdent.raz();
  }
  <FFONCTION>
}

void paramForms() : {}
{
  "(" (paramForm() ("," paramForm())* )? ")"
}

void paramForm() : {}
{
  type() <ident> {declaration.ajoutIdentParam(YakaTokenManager.identLu);}
}

void retourne() : {}
{
  <RETOURNE> expression()
  {
	expression.testRetourne();
	yvm.ireturn(IdParam.getCompteur()*2+4);	
  }
}




/******************** Declaration *********************/


void declConst() : {}
{
  <CONST>  defConst() ( "," defConst())* ";"
}

void defConst() : {}
{
	
  <ident> {declaration.setNom(YakaTokenManager.identLu);}  	  	
   "=" valConst() {declaration.ajoutIdentConst();}
    
}

void valConst() : {}{
  <entier> 		
   {declaration.setValEntier(YakaTokenManager.entierLu);}		
 | <ident>		
  {declaration.setValIdent(YakaTokenManager.identLu);}		
 | <VRAI> 		
  {declaration.setValVRAI();}		
 | <FAUX> 
 {declaration.setValFAUX();}		
}


void declVar() : {}
{
  <VAR> type() 	
  <ident>		
  {declaration.ajoutIdentVar(YakaTokenManager.identLu);}
  ("," 
      <ident>  
      {declaration.ajoutIdentVar(YakaTokenManager.identLu);}
  )* ";"
	
}

void type() :{}
{
   <ENTIER> 	
   {declaration.setTypeEntier();}		
 | <BOOLEEN>	
   {declaration.setTypeBool();}	
}



/*
 * Syntaxe des instructions.
 */
void suiteInstr() :{}
{	
	instruction() (";" (instruction())? )* 	
}

void instruction() :{}
{
    affectation()
  | lecture()
  | ecriture()
  | iteration()
  | conditionnelle()
  | retourne()
}

void affectation() :{}
{
	<ident>
	{
		Ident id = tabIdent.chercheIdent(YakaTokenManager.identLu);
		id.setAffecte(true);
		expression.setTypeAffectation(id.getType());
		expression.setOffsetAffectation(id.getOffset());
	}
	"=" expression() {expression.clotureExpression();}
}

void lecture() :{}
{
	<LIRE>"("<ident>")"
	{
		((IdVar)tabIdent.chercheIdent(YakaTokenManager.identLu)).setAffecte(true);
		yvm.lireEnt(((IdVar)tabIdent.chercheIdent(YakaTokenManager.identLu)).getOffset());
	}
}

void ecriture() :{}
{
	<ECRIRE>"("( expression() {expression.clotureExpression();}
		     |<chaine>{yvm.ecrireChaine(YakaTokenManager.chaineLue);})")"
	| <ALALIGNE>
  {yvm.aLaLigne();}
  
}


/********************* Expression ************************/
void expression() : {}
{
  simpleExpr() 
  (opRel() 
  simpleExpr() 
  {expression.controleType(); yvm.opRel();})? {}
}

void simpleExpr() : {}
{
   terme() 
   (opAdd() 
   terme()	
   {expression.controleType(); yvm.opAdd();} )*
} 
void terme() : {}
{
  facteur() 
  (opMul() 
  facteur()	
  {expression.controleType(); yvm.opMul();} )*
}
void facteur() : {}
{   primaire() 
  |  opNeg() primaire() {expression.controleTypeNEG(); yvm.opNeg();}
}

void primaire (): {}
{
   valeur()
 | "(" expression()  ")" 
 
}

void argumentsFonction() : {}
{
  "(" (expression() {expression.testParam();}("," expression() {expression.testParam();})* )? ")"
}

void valeur () : {}
{ <entier> { expression.empiler(ENTIER); yvm.iconst(YakaTokenManager.entierLu);}		
 | <ident>
 
 (
 {yvm.reserveRetour();expression.setFonctionPile(tabIdent.chercheIdentGlob(YakaTokenManager.identLu));}
 argumentsFonction()
 {expression.clotureFonction();finAppelFonction = true;}
 )?
 
 {
 	if(finAppelFonction) {
 		finAppelFonction = false;
 		Yaka.yvm.call(expression.getNomFonction());
 	} else {
 		expression.empiler(tabIdent.chercheIdent(YakaTokenManager.identLu).getType()); 
 		tabIdent.chercheIdent(YakaTokenManager.identLu).yvm();
 	}
 }
 
 | <VRAI>  {expression.empiler(VRAI); yvm.iconst(-1);}
 | <FAUX>  {expression.empiler(FAUX); yvm.iconst(0);}	
 
}

void opRel() : {}
{
   "="  {expression.empiler(EGAL);yvm.push(EGAL);}		
 | "<>" {expression.empiler(DIFFERENT);yvm.push(DIFFERENT);}	
 | "<" 	{expression.empiler(INF);yvm.push(INF);}	
 | "<=" {expression.empiler(INFOUEG);yvm.push(INFOUEG);}
 | ">" 	{expression.empiler(SUP); yvm.push(SUP);}	
 | ">=" {expression.empiler(SUPOUEG); yvm.push(SUPOUEG);}
} 


void opAdd() : {}
{
    "+"	 {expression.empiler(PLUS); yvm.push(PLUS);}
  |  "-" {expression.empiler(MOINS); yvm.push(MOINS);}
  | <OU> {expression.empiler(OU); yvm.push(OU);}
}

void opMul() : {}
{
  "*"		 {expression.empiler(MULT); yvm.push(MULT);}
  | "/"	 {expression.empiler(DIV); yvm.push(DIV);}
  | <ET> {expression.empiler(ET); yvm.push(ET);}
} 

void opNeg() : {}
{ "-" 	 {expression.empiler(NEG); yvm.push(NEG);}
 | <NON> {expression.empiler(NON); yvm.push(NON);}
}


/*********** Conditionnelle et Iteration ****************/
void iteration() : {}
{
	<TANTQUE> {yvm.tantQue();} expression() {yvm.faire();expression.clotureIterationCondition();}
	<FAIRE> (suiteInstr())* {yvm.goTo(); yvm.fait();} 
	<FAIT>
}

void conditionnelle() : {}
{
	<SI> expression() {yvm.alors(); expression.clotureIterationCondition();}
	<ALORS> (suiteInstr() )* {yvm.goToCond();yvm.sinon();}
	(<SINON> (suiteInstr())* )? {yvm.fsi();}
	<FSI>
}
